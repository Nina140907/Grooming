
Процедура ОбработкаПроведения(Отказ, Режим)
	Движения.ДенежныеСредства.Записывать = Истина; 
	Движения.Хозрасчетный.Записывать = Истина;
	Движение = Движения.ДенежныеСредства.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Период = Дата;
	Движение.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные;
	Движение.БанковскийСчетКасса = РасчетныйСчет;
	Движение.Сумма = СуммаДокумента;
	
	АналитикаПроводки = ПолучитьАналитикуПроводки();
	ВзносНаличными = Перечисления.ВидыОперацийПоступленияНаРасчетныйСчет.ВзносНаличными;
	Если ВидОперации <> ВзносНаличными Тогда
		Движение = Движения.Хозрасчетный.Добавить();
		Движение.Период = Дата;
		Движение.Сумма = СуммаДокумента; 	
		Движение.СчетДт = АналитикаПроводки.СчетДебета;
		Движение.СчетКт = АналитикаПроводки.СчетКредита;
		Движение.Содержание = АналитикаПроводки.Содержание;
		БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(Движение.СчетДт, Движение.СубконтоДт, АналитикаПроводки.СубконтоДебета);
    	БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(Движение.СчетКт, Движение.СубконтоКт, АналитикаПроводки.СубконтоКредита);
	КонецЕсли;  
	
    КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	ТипДокументаОснования = ТипЗнч(ДанныеЗаполнения);
	
	ТипДокументаРеализациятоваровИУслуг = Тип("ДокументСсылка.РеализацияТоваровИУслуг");
	ТипДокументаПоступленияТоваровИМатериалов = Тип("ДокументСсылка.ПоступлениеТоваровИМатериалов");
	ТипДокументаПоступленияУслуг = Тип("ДокументСсылка.ПоступлениеУслуг");
	
	ДанныеЗаполненияОснования = Новый Структура;
	Если ТипДокументаОснования = ТипДокументаРеализацияТоваровИУслуг Тогда
		ДанныеЗаполненияОснования = ПолучитьДанныеПоРеализацииТоваровИУслуг(ДанныеЗаполнения); 
	ИначеЕсли ТипДокументаОснования = ТипДокументаПоступленияТоваровИМатериалов Тогда
		ДанныеЗаполненияОснования = ПолучитьДанныеПоПоступлениюТоваровИМатериалов(ДанныеЗаполнения);
	ИначеЕсли ТипДокументаОснования = ТипДокументаПоступленияУслуг Тогда
		ДанныеЗаполненияОснования = ПолучитьДанныеПоПоступлениюУслуг(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполненияОснования);
КонецПроцедуры 

Функция ПолучитьДанныеПоРеализацииТоваровИУслуг(ДанныеЗаполнения)  
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДанныеЗаполнения);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровИУслуг.Ссылка КАК ДокументОснование,
	               |	РеализацияТоваровИУслуг.Клиент КАК Плательщик,
	               |	РеализацияТоваровИУслуг.СуммаДокумента КАК СуммаДокумента,
	               |	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступленияНаРасчетныйСчет.ОплатаОтПокупателя) КАК ВидОперации
	               |ИЗ
	               |	Документ.РеализацияТоваровИУслуг КАК РеализацияТоваровИУслуг
	               |ГДЕ
	               |	РеализацияТоваровИУслуг.Ссылка = &Ссылка"; 
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	Возврат Результат; 
	
КонецФункции 

Функция ПолучитьДанныеПоПоступлениюТоваровИМатериалов(ДанныеЗаполнения)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДанныеЗаполнения);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровИМатериалов.Ссылка КАК ДокументОснование,
	               |	ПоступлениеТоваровИМатериалов.Поставщик КАК Плательщик,
	               |	ПоступлениеТоваровИМатериалов.СуммаДокумента КАК СуммаДокумента,
	               |	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступленияНаРасчетныйСчет.ВозвратОтПоставщика) КАК ВидОперации
	               |ИЗ
	               |	Документ.ПоступлениеТоваровИМатериалов КАК ПоступлениеТоваровИМатериалов
	               |ГДЕ
	               |	ПоступлениеТоваровИМатериалов.Ссылка = &Ссылка";
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	Возврат Результат;  

КонецФункции 

Функция ПолучитьданныеПоПоступлениюУслуг(ДанныеЗаполнения)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДанныеЗаполнения);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеУслуг.Ссылка КАК ДокументОснование,
	               |	ПоступлениеУслуг.Поставщик КАК Плательщик,
	               |	ПоступлениеУслуг.СуммаДокумента КАК СуммаДокумента,
	               |	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступленияНаРасчетныйСчет.ВозвратОтПоставщика) КАК ВидОперации
	               |ИЗ
	               |	Документ.ПоступлениеУслуг КАК ПоступлениеУслуг
	               |ГДЕ
	               |	ПоступлениеУслуг.Ссылка = &Ссылка";
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	Возврат Результат;

КонецФункции 

Функция ПолучитьАналитикуПроводки()
	ОплатаОтПокупателя = Перечисления.ВидыОперацийПоступленияНаРасчетныйСчет.ОплатаОтПокупателя;
	ВозвратОтПоставщика = Перечисления.ВидыОперацийПоступленияНаРасчетныйСчет.ВозвратОтПоставщика;
	ОплатаПоБанковскимКартам =  Перечисления.ВидыОперацийПоступленияНаРасчетныйСчет.ОплатаПоБанковскимКартам;
	
	СтруктураАналитики = Новый Структура; 
	СтруктураАналитики.Вставить("СчетДебета",ПланыСчетов.Хозрасчетный.РасчетныйСчет);
	СтруктураАналитики.Вставить("СубконтоДебета",РасчетныйСчет);
	Если ВидОперации = ОплатаОтПокупателя Тогда
		СтруктураАналитики.Вставить("Содержание","Оплата от покупателя на расчетный счет");
		СтруктураАналитики.Вставить("СчетКредита",Планысчетов.Хозрасчетный.РасчетыСПокупателями);
		СтруктураАналитики.Вставить("СубконтоКредита",Плательщик);  
	ИначеЕсли ВидОперации = ВозвратОтПоставщика Тогда
		СтруктураАналитики.Вставить("СчетКредита", ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
		СтруктураАналитики.Вставить("СубконтоКредита", Плательщик);
		СтруктураАналитики.Вставить("Содержание", "Возврат средств от поставщика на расчетный счет");
	ИначеЕсли ВидОперации = ОплатаПоБанковскимКартам Тогда
		СтруктураАналитики.Вставить("СчетКредита",ПланыСчетов.Хозрасчетный.ПереводыВПути);
		СтруктураАналитики.Вставить("СубконтоКредита",ЭквайринговыйТерминал);
		СтруктураАналитики.Вставить("Содержание","Поступление на расчетный счет по операциям с банковским картам");
	КонецЕсли; 
	Возврат СтруктураАналитики;
КонецФункции
	

		
		
	


	

